using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class playerController : MonoBehaviour
{
    GameObject player;
    Rigidbody2D rb;
    DistanceJoint2D joint;
    public LineRenderer line;
    RaycastHit2D hit;
    public LayerMask mask;
    public float speed;
    public float jumpForce;
    public float step = 0.2f;
    public float distance = 10.0f;
    bool isGrounded = true;
    Vector3 targetPos;
    public Animator animator;
    SpriteRenderer spriteRenderer;

    // Start is called before the first frame update
    void Start()
    {
        line = line.GetComponent<LineRenderer>();
        rb = GetComponent<Rigidbody2D>();
        joint = GetComponent<DistanceJoint2D>();
        joint.enabled = false;
        line.enabled = false;
        spriteRenderer = GetComponent<SpriteRenderer>();
    }

    // Update is called once per frame
    void Update()
    {
        
        

        float x = Input.GetAxis("Horizontal") * speed;

        rb.velocity = new Vector3(x * Time.fixedDeltaTime, rb.velocity.y, 0);

        if(x < 0.0f)
        {
            spriteRenderer.flipX = true;
        }else if(x > 0.0f)
        {
            spriteRenderer.flipX = false;
        }

        if(Input.GetKeyDown(KeyCode.Space) && isGrounded == true)
        {
            rb.velocity = new Vector3(rb.velocity.x, jumpForce, 0);
            isGrounded = false;

            animator.SetBool("isJumping", true);
        }

        animator.SetFloat("Speed", Mathf.Abs(x));

        if (Input.GetMouseButtonDown(0)) ///If Left Click
        {
            targetPos = Camera.main.ScreenToWorldPoint(Input.mousePosition);
            targetPos.z = 0;
            hit = Physics2D.Raycast(transform.position, targetPos - transform.position, distance, mask);

            Debug.DrawRay(transform.position, hit.point, Color.green);

            if (hit.collider != null && hit.collider.gameObject.GetComponent<BoxCollider2D>() != null)
            {
                
                Debug.Log(hit.collider.name);
                joint.enabled = true;
                joint.connectedAnchor = hit.point; ;
                joint.distance = Vector2.Distance(transform.position, hit.point);

                line.enabled = true;
                line.SetPosition(0, transform.position);
                line.SetPosition(1, hit.point);
            }
        }

        if (Input.GetKey(KeyCode.LeftShift))
        {
            if (joint.distance > 0.5f)
            {
                Debug.Log(joint.distance);
                joint.distance -= step;
            }
            else
            {
                line.enabled = false;
                joint.enabled = false;
            }
        }

        if (Input.GetMouseButton(0))
        {
            line.SetPosition(0, transform.position);
        }

        if (Input.GetMouseButtonUp(0))
        {
            joint.enabled = false;
            line.enabled = false;
        }
            
    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if(collision.collider.tag == "grounded")
        {
            isGrounded = true;
            animator.SetBool("isJumping", false);
        }
    }
}
